%%%%%%%%%%%%%% COASTCAMS %%%%%%%%%%%%%
% Please cite when using CoastCams: 

% Nuyts, S., Almar, R., Morichon, D., Dealbera, S., Abalia, A., MuÃ±oz, J. M., Abessolo, G. O., & Regard, V. (2023). 
% CoastCams: A MATLAB toolbox making accessible estimations of nearshore processes, mean water levels, and morphology from timestack images. 
% Environmental Modelling & Software, 168, 105800. https://doi.org/https://doi.org/10.1016/j.envsoft.2023.105800 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% This script will compute nearshore processes from timestacks (e.g. wave
% height, wave period, wave celerity), sea levels (e.g. tidal elevation), 
% and morphology (e.g. shoreline positions).

%% A: Housekeeping
close all
clearvars 
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% START ESSENTIAL USER INPUT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% B: Add paths
% B1: Path to User Scripts
addpath(genpath('G:\MATLAB_20221128\Users_Scripts\'))
% B2: Path to Timestack Images
img_path = 'G:\MATLAB_20221128\Timestacks\Camera1_Rectified\';
% B3: Output path: Location where outputs will be stored
out_path = 'G:\MATLAB_20221128\Output\';

%% C: Select Timestack Images
Img = dir([img_path,strcat('**/S_1_*.jpeg')]); % Name should include datetime as S_1_yyyymmddHHMM e.g. "S_1_202212310700.jpeg"

%% D: Parameters that require user input
% D1: Parameters for image processing
dt          = 1/2; % dt = 1/freq with freq = 2 (frequency acquisition of the camera: 2 images per second)
H_camera    = 27.240; % Camera height above MSL [m] 
res         = 0.1; % Resolution: Size of each pixel [m]
rotation    = 270; % Waves in timestack image should come from top-left corner - rotate accordingly 

% D2: Reading camera parameters 
CoordCam    = [0,0,H_camera]; 
dur         = 14; % Duration of the Timestack in minutes

% D3: Parameters for cross-correlation computation
Nlim        = 1600; % Width of Timestack Image calculation (can decrease to only calculate portion of transcet and to speed-up calculations)
dpha        = 1; % Time lag parametes used for cross-correlation calculations (should be smaller than smallest wave period)
icmin       = 1; % Minimum value on the x-axis for pre-processing
icmax       = 680; % Maximum value on the x-axis for pre-processing
dc          = 100; % see Thuan et al., 2019 and Abessolo et al., 2020 (Figure 2 above)
resc        = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% START OPTIONAL USER INPUT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% D4: Selection of shoreline method
ShoreMethod = 1; % 1 = grayscale (specifically designed for Socoa rocky shore);
                 % 2 = Red- minus Blue- channel method;
                 % 3 = Colour convergence method;
threshold = 30;  % threshold between peaks and troughs (only used in ShoreMethod = 1)
                 
% D5: Plot option: If user wants to plot figures for each individual timestack
plotoption_shore = 1; % plots for shoreline position
plotoption_imfor = 1; % plots for image formating
plotoption_crosscor = 1; % plots for cross-correlation matrix

% D6: Camera number: Only used for naming output files
camera = 1;

%% E: Variables to be calculated from Timestack images
Img_date = []; WaveCelerity = []; df = []; WaveLength = []; Hs_TS = []; Tp_TS = []; Tm_TS = []; WaveEnergy = []; RollerLength = [];  BreakpointDepth = [];
BreakpointLocation = []; Cf1 = []; WLe1 = []; Depth_S = []; ShorePosition = []; Stack_av = []; BL_Coordinates = []; WaterDepth_L = [];

%% F: Coordinate System
% Transfer pixel coordinates to real life coordinates 
coordinates = load('G:\MATLAB_20221128\Sensors\Coordinates.txt');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END ALL USER INPUT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% G: Computing Parameters from Timestack Images 
for i = 1:length(Img);
    % G1: Extract datetime from Timestack Images 
    Img_date = [Img_date; datenum(Img(i).name(5:end-4),'yyyymmddHHMM')]; 
    Time_TS = datetime(Img_date(:),'ConvertFrom','datenum');
    
    % Step 2: Load and read Timestack Images
    fprintf('Analysing Timestack from %s\n',datestr(datenum(Img(i).name(5:16),'yyyymmddHHMM'),'mmmm dd, yyyy HH:MM AM'))
    i
    try
        Timestack = imread(Img(i).name);
    catch
        fprintf("Error reading image file %s\n", Img(i).name);
        return
    end
    
    Timestack_rot = imrotate (Timestack, rotation); % Rotate Timestack Image so that waves arrive from top left corner     
    [nt,nc,ncol] = size(Timestack_rot); % Get dimensions from Timestack Image   

    % Step 3: Extract Shoreline Position
    [shoreline_positions] = shoreline_position (Timestack_rot, threshold, res, ShoreMethod, plotoption_shore);
    ShorePosition = [ShorePosition; shoreline_positions]; 
      
    % Step 4: Image Formatting   
    dx = 0:0.1:nc/10;
    dxXX  = (dx(1:nc)).';
    sLimit = [1:1:icmax - dc]';
    
    if Nlim > nt
        error('Error: Nlim must be smaller than the time dimension of the Timestack image. Please decrease Nlim');
    end
    if icmax > nc
        error('Error: icmax must be smaller than the cross-shore dimension of the Timestack image. Please decrease icmax');
    end
     
    if plotoption_imfor == 1
        figure(1)
        set(gcf, 'Position', [10 10 600 1200], 'Color', [1, 1, 1])
        subplot(311)
        image(Timestack_rot)
        xlabel('X[Pixels]')
        ylabel('Frames')
        title(sprintf('%s',datestr(datenum(Img(i).name(5:16),'yyyymmddHHMM'),'mmmm dd, yyyy HH:MM AM')))
        set(gca, 'fontsize',14)
                               
        subplot (312)
        image(Timestack_rot)
        xlabel('X [m]')
        ylabel('Frames')
        set(gca, 'fontsize', 14)
        set(gca,'XTick',0:200:nc)
        set(gca,'XTickLabel',0:20:nc/10)   
     end

    So = double(Timestack_rot);
    S_std = nanstd(So);
    
    S_std0 = smooth(S_std(:,:,3)); % Only the blue band is considered 
    iS = find(S_std0>0.5*max(S_std0)); 
    
    S0 = double(So(:,:,3)); 
    S1 = S0(1:min([Nlim size(S0,1)]),:);
    
    % Step 5: Pre-processing and check
    [S2]=ImagePreProcessing_CoastCams(S1,icmin,icmax,dt,resc,1); 
   
    if plotoption_imfor == 1
        subplot(313)
        image(S0)
        box on
        hold on
        plot(smooth(S_std(:,:,1),30).*40,'r')
        plot(smooth(S_std(:,:,2),30).*40,'g')
        plot(smooth(S_std(:,:,3),30).*40,'b')
        xlim([1 size(S0,2)])
        patch([min(iS) min(iS)],[0 size(S0,1)],'k','Linewidth',2)
        patch([max(iS) max(iS)],[0 size(S0,1)],'k','Linewidth',2)
        hold off
        box on
        xlabel('X [Pixels]')
        ylabel('Frames')
        set(gca, 'fontsize',14)
    end
    
    % Step 6: Compute Wave Parameters
    try 
        [C,depth_s,depth_l,hs,hm,Tm,Tp,Er,rolL,nbwave,Breakstd,Breakmean1,Breakmean2,BreakLocs,BreakDepth]=WaveParameters_CoastCam(Img(i).name,dt,CoordCam,dxXX./100,dur);
    catch ex
        for k = 1:numel(ex)
        disp(['Error in ' ex(k).stack(1).name ': ' ex(k).message]);
        end
    % set all output variables to NaN if empty
    C = NaN;
    depth_s = NaN;
    depth_l = NaN;
    hs = NaN;
    hm = NaN;
    Tm = NaN;
    Tp = NaN;
    Er = NaN;
    rolL = NaN;
    nbwave = NaN;
    Breakstd = NaN;
    Breakmean1 = NaN;
    Breakmean2 = NaN;
    BreakLocs = NaN;
    BreakDepth = NaN;
    end
    
    if BreakLocs == 0
        BreakLocs = numel(sLimit);
    end
    
    Hs_TS = [Hs_TS; hs];
    Tp_TS = [Tp_TS; Tp];
    Tm_TS = [Tm_TS; Tm];
    WaveEnergy(i,1:size(Er,2)) = nanmean(Er);
    RollerLength(i,1:size(rolL,2)) = nanmean(rolL);
    BreakDepthf (i, 1:size(depth_s,2)) = nanmean(depth_s); 
    BreakpointLocation = [BreakpointLocation; (BreakLocs+(dc/2))];  
    BreakpointDepth = [BreakpointDepth; BreakDepth];
        
    % Step 7: Cross-correlation Calculations   
    try
    [Cf1,WLe1]=CrossCorrelation_CoastCams(S2,dpha,dt,dc, plotoption_crosscor);   
    Depth_S = ((Cf1.^2)/9.81)./10; % Calculate depth using shallow water equation
    
    catch
        Cf1 = NaN.*ones(1,size(sLimit,1));
        WLe1 = NaN.*ones(1,size(sLimit,1));
        Depth_S = NaN.*ones(1,size(sLimit,1));
    end
    
    WaveCelerity(i,1:size(Cf1,2)) = movmean(Cf1./10, 10); %get moving average
    WaveLength(i,1:size(WLe1,2)) = movmean(WLe1,10);
    WaterDepth(i,1:size(Depth_S,2)) = movmean(Depth_S./10, 10);
    
    % Step 8: Calculate depth using linear wave theory
    try 
    [df] = LinearC(Tp, WaveCelerity, 0.01);
    catch 
        df = NaN.*ones(1,height(sLimit,1));
    end
    WaterDepth_L = [WaterDepth_L; movmean(df(:,[1:height(sLimit)]), 10)];    
               
    % Step 9 : Calculating Additional Parameters
    % Sea level Anomoly
    Csmooth_S = smooth2(WaveCelerity,1,30); % smooth signal
    Csmooth_L = smooth2(WaterDepth_L,1,30);
    SLA_S = Csmooth_S(:,[1:height(sLimit)])- nanmean(Csmooth_S(:,[1:height(sLimit)])); % calculate sea level anomoly using shallow water
    SLA_L = Csmooth_L(:,[1:height(sLimit)])- nanmean(Csmooth_L(:,[1:height(sLimit)])); % calculate sea level anomoly using linear wave
        
    % Water Level
    Level_TS = nanmean(WaveCelerity ,2);
    
    % Relative Tidal Range
    nRTR_thresh = Level_TS -(min(Level_TS));
    nRTR_thresh(nRTR_thresh < 0.2) = NaN; % threshold to avoid dividing by 0
    RTR = hs./nRTR_thresh;  
    
    % Bathymetry
    Bathymetry = WaterDepth - SLA_S;
        
    % Step 10: Produce an average Timestack Image to see change over time
    Stack_av = [Stack_av; mean(vertcat(Timestack_rot),1,'omitnan')];
    Stack_ro = imrotate(Stack_av, 90);
    
    % Step 11: Convert to real life coordinates
    BL_Lam_Mid = coordinates(BreakLocs, :);
    BL_Coordinates = [BL_Coordinates; BL_Lam_Mid]; 
end

%% H: Pixels coordinates to real life coordinates
BL_Coordinates_x = BL_Coordinates(:, 1);
BL_Coordinates_y = BL_Coordinates(:, 2);
BL_Coordinates = timetable(Time_TS, BL_Coordinates_x, BL_Coordinates_y);
writetimetable(BL_Coordinates, 'BL_Coordinates.txt');

%% I: Collecting all parameters from Timestack Image
% Create common timetable
disp(num2str(length(Img)))
WP = timetable(Time_TS, BreakpointLocation, BreakpointDepth, Hs_TS, WaveEnergy, RollerLength,  WaveCelerity(:,[1:numel(sLimit)]), Tp_TS, Tm_TS, WaveLength, WaterDepth_L, ShorePosition, SLA_S, SLA_L, RTR, Bathymetry_S, Bathymetry_L);
Data_TS = retime(WP, 'regular', 'mean', 'TimeStep', minutes(15));
Data_TS.Properties.VariableNames = {'BreakPointLocation', 'BreakpointDepth', 'Hs', 'WaveEnergy', 'RollerLength', 'WaveCelerity', 'Tp', 'Tm', 'WaveLength', 'WaterDepth', 'ShorelinePosition', 'SLA_S', 'SLA_L', 'RTR', 'Bathymetry_S', 'Bathymetry_L'};

% Show average daily values
WP_daily = retime(Data_TS, 'daily', 'mean');
WP_daily.Properties.VariableNames = {'BreakPointLocation', 'BreakpointDepth', 'Hs', 'WaveEnergy', 'RollerLength', 'WaveCelerity', 'Tp', 'Tm', 'WaveLength', 'WaterDepth', 'ShorelinePosition', 'SLA_S', 'SLA_L', 'RTR', 'Bathymetry_S', 'Bathymetry_L'};
WP_daily 

%% J: Save Outputs
% J1: Save Workspace
date = datetime('now', 'Format', 'yyyyMMdd');
Ft = char(date);
Fn = sprintf('Camera_%d_', camera);
FileName = ['Output_S01_', Fn, Ft];
save(fullfile(out_path, FileName));

% J2: Export to .txt
txt = fullfile(out_path, [FileName '.txt']);
writetimetable(WP, txt);

%% K: Plot Outputs
figure
ax1 = subplot(4,1,1);
imagesc(imrotate(uint8(Stack_av), rotation))
grid on
axis(ax1,'tight');
set(gca, 'XTick', 1:24:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax2 = subplot(4,1,2);
plot(movmean(SLA_S(:, 294),10), '+:r')
grid on
axis(ax2,'tight');
ylabel('SLA [m]', 'FontSize', 14)
set(gca, 'XTick', 1:24:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax3 = subplot(4,1,3);
plot(movmean(Hs_TS,10), '+:r')
grid on
axis(ax3,'tight');
ylabel('\it H_{s} [m]', 'FontSize', 14)
set(gca, 'XTick', 1:24:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax4 = subplot(4,1,4);
plot(movmean(Tp_TS, 10), '+:r')
grid on
axis(ax4,'tight');
ylabel('\it T_{p} [s]', 'FontSize', 14)
set(gca, 'XTick', 1:24:length(Time_TS));
set(gca, 'XTickLabel',datestr(Time_TS(1:24:length(Time_TS)),'mmm dd HH AM'), 'FontSize', 14);
linkaxes([ax1 ax2 ax3 ax4], 'x')
set(gcf, 'Color', 'w')
