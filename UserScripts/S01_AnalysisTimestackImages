% This script will compute wave parameters from timestacks (e.g. wave
% height, wave period, wave celerity), sea levels (e.g. tidal elevation), 
% and morphology (e.g. shoreline positions).

%% Housekeeping
close all
clear all
clc


% Path to scripts
addpath(genpath('G:\MATLAB_20221128\Users_Scripts\'))
% Path to Timestacks
path = 'G:\MATLAB_20221128\Timestacks\Camera1_Rectified\';
% Plot option: If user wants to plot figures in progress
plotoption = 1;
% Camera
camera = 1;

%% Select images
% Name should include datetime as S_1_yyyymmddHHMM e.g. "S_1_202212310700.jpeg"
Img = dir([path,strcat('**/S_1_*.jpeg')]);

%% Vectors to save the final parameters
% Preallocating Variables
Img_date = [];
WaveCelerity = [];
df = [];
WaveLength = [];
Hs_TS = [];
Tp_TS = [];
Tm_TS = [];
WaveEnergy = [];
RollerLength = []; 
BreakpointDepth = [];
BreakpointLocation = [];
Cf1 = [];
WLe1 = [];
Depth_S = [];
ShorePosition = [];
Stack_av = [];
BL_Coordinates = [];
WaterDepth_L = [];

%% Parameters for the image processing
dt          = 1/2; %dt = 1/freq with freq = 2 (frequency acquisition of the camera: 2 images per second)
H_camera    = 27.240; %Camera height above MSL [m] 
res         = 0.1; %Resolution: Size of each pixel [m]
rotation    = 270; %Waves in timestack image should come from top-left corner

%Reading camera parameters 
CoordCam    = [0,0,H_camera]; 
dur         = 14; % Duration of the Timestack in minutes

%Parameters for cross-correlation computation
Nlim        = 1600; %width of Timestack (can decrease to only calculate portion of transcet and to speed-up calculations)
dpha        = 1; % Time lag parametes used for cross-correlation calculations (should be smaller than smallest wave period)

%% Coordinate System
% Transfer pixel coordinates to real life coordinates 
coordinates = load('G:\MATLAB_20221128\Sensors\Coordinates.txt');

%% Computation Wave Parameters from Timestacks 
for i = 1:length(Img);
    % Step 1: Load images  
    Img_date = [Img_date; datenum(Img(i).name(5:end-4),'yyyymmddHHMM')];
    Time_TS = datetime(Img_date(:),'ConvertFrom','datenum');
    
    fprintf('Analysing Timestack from %s\n',datestr(datenum(Img(i).name(5:16),'yyyymmddHHMM'),'mmmm dd, yyyy HH:MM AM'))
    i
    try
        Sro = imread(Img(i).name); % Reading image
    catch
        fprintf("Error reading image file %s\n", Img(i).name);
        return
    end
    
    I = imrotate (Sro, rotation); % Rotate image so that waves arrive from top left corner 
       
    Stack_av = [Stack_av; mean(vertcat(I),1,'omitnan')];
    Stack_ro = imrotate(Stack_av, 90);
    
    [nt,nc,ncol]=size(I);   

    % Step 2: Shoreline Position
    ShoreMethod = 2;
    threshold = 30; %threshold between peaks and troughs
    [shoreline_positions] = shoreline_position (I, threshold, res, ShoreMethod, plotoption);

    ShorePosition = [ShorePosition; shoreline_positions]; 

    % Step 3 : Image Formatting        
    dx = 0:0.1:nc/10;
    dxXX  = (dx(1:nc)).';

    icmin = 1; % Minimum value on the x-axis for pre-processing
    icmax = 680; % Maximum value on the x-axis for pre-processing
    dc = 100; % see Thuan et al., 2019 and Abessolo et al., 2020 (Figure 2 above)
    resc = 1;
    sLimit = [1:1:icmax - dc]';
     
    if plotoption == 1
        figure(1)
        set(gcf, 'Position', [10 10 600 1200], 'Color', [1, 1, 1])
        subplot(311)
        image(I)
        xlabel('X[Pixels]')
        ylabel('Frames')
        title(sprintf('%s',datestr(datenum(Img(i).name(5:16),'yyyymmddHHMM'),'mmmm dd, yyyy HH:MM AM')))
        set(gca, 'fontsize',14)
                               
        subplot (312)
        image(I)
        xlabel('X [m]')
        ylabel('Frames')
        set(gca, 'fontsize', 14)
        set(gca,'XTick',0:200:nc)
        set(gca,'XTickLabel',0:20:nc/10)   
     end

    So = double(I);
    S_std = nanstd(So);
    
    S_std0 = smooth(S_std(:,:,3)); % Only the blue band is considered 
    iS = find(S_std0>0.5*max(S_std0)); 
    
    S0 = double(So(:,:,3)); 
    S1 = S0(1:min([Nlim size(S0,1)]),:);
    
    % Step 4: Pre-processing check
    [S2]=ImagePreProcessing_CoastCams(S1,icmin,icmax,dt,resc,1); 
   
    if plotoption == 1
        subplot(313)
        image(S0)
        box on
        hold on
        plot(smooth(S_std(:,:,1),30).*40,'r')
        plot(smooth(S_std(:,:,2),30).*40,'g')
        plot(smooth(S_std(:,:,3),30).*40,'b')
        xlim([1 size(S0,2)])
        patch([min(iS) min(iS)],[0 size(S0,1)],'k','Linewidth',2)
        patch([max(iS) max(iS)],[0 size(S0,1)],'k','Linewidth',2)
        hold off
        box on
        xlabel('X [Pixels]')
        ylabel('Frames')
        set(gca, 'fontsize',14)
    end
    
    % Step 5: Compute Wave Parameters
    [C,depth_s,depth_l,hs,hm,Tm,Tp,Er,rolL,nbwave,Breakstd,Breakmean1,Breakmean2,BreakLocs,BreakDepth]=WaveParameters_CoastCam(Img(i).name,dt,CoordCam,dxXX./100,dur);
    
    if isempty(hm);
        hm = NaN;
    end
    
    if BreakLocs == 0
        BreakLocs = 580;
    end
    
    Hs_TS = [Hs_TS; hs];
    Tp_TS = [Tp_TS; Tp];
    Tm_TS = [Tm_TS; Tm];
    WaveEnergy(i,1:size(Er,2)) = nanmean(Er);
    RollerLength(i,1:size(rolL,2)) = nanmean(rolL);
    BreakDepthf (i, 1:size(depth_s,2)) = nanmean(depth_s); 
    BreakpointLocation = [BreakpointLocation; (BreakLocs+50)];  
    BreakpointDepth = [BreakpointDepth; BreakDepth];
        
    % Step 6: Cross-correlation Calculations   
    try
    [Cf1,WLe1]=CrossCorrelation_CoastCams(S2,dpha,dt,dc);   
    Depth_S = ((Cf1.^2)/9.81)./10; 
    
    catch
        Cf1 = NaN.*ones(1,size(sLimit,1));
        WLe1 = NaN.*ones(1,size(sLimit,1));
        Depth_S = NaN.*ones(1,size(sLimit,1));
    end
    
    WaveCelerity(i,1:size(Cf1,2)) = movmean(Cf1./10, 10);
    WaveLength(i,1:size(WLe1,2)) = movmean(WLe1,10);
    WaterDepth(i,1:size(Depth_S,2)) = movmean(Depth_S./10, 10);
    
    try 
    [df] = LinearC(Tp, WaveCelerity, 0.01);
    catch 
        df = NaN.*ones(1,height(sLimit,1));
    end
    WaterDepth_L = [WaterDepth_L; movmean(df(:,[1:580]), 10)]; 
          
    % Convert to real life coordinates
    BL_Lam_Mid = coordinates(BreakLocs, :);
    BL_Coordinates = [BL_Coordinates; BL_Lam_Mid];
           
    % Step 6 : Calculating Additional Parameters
    Csmooth_S = smooth2(WaveCelerity,1,30); 
    Csmooth_L = smooth2(WaterDepth_L,1,30);
    SLA_S = Csmooth_S(:,[1:580])- nanmean(Csmooth_S(:,[1:580]));
    SLA_L = Csmooth_L(:,[1:580])- nanmean(Csmooth_L(:,[1:580]));
        
    Level_TS = nanmean(WaveCelerity ,2);
    
    nRTR_C1_thresh = Level_TS -(min(Level_TS));
    nRTR_C1_thresh(nRTR_C1_thresh < 0.2) = NaN;
    RTR = hs./nRTR_C1_thresh;  
    
    Bathymetry_S = WaterDepth - SLA_S;
    Bathymetry_L = WaterDepth_L - SLA_L;
  
end

%% Pixels coordinates to real life coordinates
BL_Coordinates_x = BL_Coordinates(:, 1);
BL_Coordinates_y = BL_Coordinates(:, 2);
BL_Coordinates = timetable(Time_TS, BL_Coordinates_x, BL_Coordinates_y);
writetimetable(BL_Coordinates, 'BL_Coordinates.txt');
%% Timestack Average
disp(num2str(length(Img)))
WP = timetable(Time_TS, BreakpointLocation, BreakpointDepth, Hs_TS, WaveEnergy, RollerLength,  WaveCelerity(:,[1:580]), Tp_TS, Tm_TS, WaveLength, WaterDepth_L, ShorePosition, SLA_S, SLA_L, RTR, Bathymetry_S, Bathymetry_L);
Data_TS = retime(WP, 'regular', 'mean', 'TimeStep', minutes(15));
Data_TS.Properties.VariableNames = {'BreakPointLocation', 'BreakpointDepth', 'Hs', 'WaveEnergy', 'RollerLength', 'WaveCelerity', 'Tp', 'Tm', 'WaveLength', 'WaterDepth', 'ShorelinePosition', 'SLA_S', 'SLA_L', 'RTR', 'Bathymetry_S', 'Bathymetry_L'};

WP_daily = retime(Data_TS, 'daily', 'mean');
WP_daily.Properties.VariableNames = {'BreakPointLocation', 'BreakpointDepth', 'Hs', 'WaveEnergy', 'RollerLength', 'WaveCelerity', 'Tp', 'Tm', 'WaveLength', 'WaterDepth', 'ShorelinePosition', 'SLA_S', 'SLA_L', 'RTR', 'Bathymetry_S', 'Bathymetry_L'};
WP_daily 

%% Save Outputs
% Save Workspace
date = datetime('now', 'Format', 'yyyyMMdd');
Ft = char(date);
Fn = sprintf('Camera_%d_', camera);
FileName = ['Output_S01_', Fn, Ft];
save(fullfile('G:\MATLAB_20221128\Output\', FileName));

% Export to .txt
txt = fullfile('G:\MATLAB_20221128\Output\', [FileName '.txt']);
writetimetable(WP, txt);

%% Plot Outputs
figure
ax1 = subplot(4,1,1);
imagesc(imrotate(uint8(Stack_av), rotation))
grid on
axis(ax1,'tight');
set(gca, 'XTick', 1:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax2 = subplot(4,1,2);
plot(SLA_S(:, 294), '+:r')
grid on
axis(ax2,'tight');
ylabel('SLA [m]', 'FontSize', 14)
set(gca, 'XTick', 1:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax3 = subplot(4,1,3);
plot(Hs_TS, '+:r')
grid on
axis(ax3,'tight');
ylabel('\it H_{s} [m]', 'FontSize', 14)
set(gca, 'XTick', 1:length(Time_TS));
set(gca, 'XTickLabel',[]);
set(gca, 'FontSize', 14);

ax4 = subplot(4,1,4);
plot(Tp_TS, '+:r')
grid on
axis(ax4,'tight');
ylabel('\it T_{p} [s]', 'FontSize', 14)
set(gca, 'XTick', 1:length(Time_TS));
set(gca, 'XTickLabel',datestr(Time_TS(1:length(Time_TS)),'mm dd'), 'FontSize', 14);
linkaxes([ax1 ax2 ax3 ax4], 'x')
set(gcf, 'Color', 'w')
